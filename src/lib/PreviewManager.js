import { execa } from 'execa';
import { join } from 'path';
import { writeFile, mkdir, readFile } from 'fs/promises';
import waitPort from 'wait-port';
import chalk from 'chalk';
import { createHash } from 'crypto';
import { EnhancedYogaLayoutEngine } from './EnhancedYogaLayoutEngine.js';

export class PreviewManager {
  constructor() {
    this.activeServers = new Map();
    this.defaultPort = 4321;
  }

  async startWebPreview(config, options = {}) {
    try {
      // Generate Astro project
      const astroDir = await this.generateAstroProject(config);
      const port = parseInt(options.port) || this.defaultPort;

      console.log(chalk.yellow('üåê Starting Astro development server...'));

      // Start Astro dev server
      const astroProcess = execa('astro', ['dev', '--port', port.toString()], {
        cwd: astroDir,
        stdio: ['ignore', 'pipe', 'pipe']
      });

      // Handle process output
      astroProcess.stdout.on('data', (data) => {
        if (process.env.DEBUG) {
          console.log(chalk.gray(data.toString()));
        }
      });

      astroProcess.stderr.on('data', (data) => {
        if (process.env.DEBUG) {
          console.error(chalk.red(data.toString()));
        }
      });

      // Wait for server to be ready
      console.log(chalk.yellow(`‚è≥ Waiting for server on port ${port}...`));
      await waitPort({ host: 'localhost', port: parseInt(port), timeout: 30000 });

      const url = `http://localhost:${port}`;
      console.log(chalk.green(`üöÄ Preview ready at: ${url}`));

      // Show in terminal with browsh first
      console.log(chalk.yellow('üñºÔ∏è Opening post card preview in terminal...'));
      await this.showInTerminal(url);

      // Store server reference
      this.activeServers.set(config.name, {
        process: astroProcess,
        port,
        url
      });

      return { url, port, process: astroProcess };

    } catch (error) {
      console.error(chalk.red('‚ùå Error starting web preview:'), error.message);
      throw error;
    }
  }

  async startAsciiPreview(config, options = {}) {
    try {
      // First start the web preview
      const webPreview = await this.startWebPreview(config, options);
      
      console.log(chalk.yellow('üñºÔ∏è Launching Browsh (ASCII mode)...'));
      
      // Wait a bit for the server to be fully ready
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Launch Browsh
      await execa('browsh', [webPreview.url], {
        stdio: 'inherit'
      });

    } catch (error) {
      console.error(chalk.red('‚ùå Error starting ASCII preview:'), error.message);
      console.log(chalk.yellow('üí° Make sure Browsh is installed: https://www.brow.sh/downloads/'));
      throw error;
    }
  }

  async generateAstroProject(config) {
    const projectHash = createHash('md5')
      .update(JSON.stringify(config))
      .digest('hex');
    
    const astroDir = join(process.cwd(), 'astro', `preview-${projectHash}`);
    
    // Load layout.json if it exists (generated by Yoga layout engine)
    let layoutData = null;
    try {
      const layoutPath = join(process.cwd(), 'layout.json');
      const layoutContent = await readFile(layoutPath, 'utf8');
      layoutData = JSON.parse(layoutContent);
      console.log(chalk.green('üßò Using Yoga layout engine data for preview'));
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è No layout.json found, using basic layout'));
    }
    
    // Create Astro project structure
    await mkdir(astroDir, { recursive: true });
    await mkdir(join(astroDir, 'src', 'pages'), { recursive: true });
    await mkdir(join(astroDir, 'src', 'components'), { recursive: true });
    await mkdir(join(astroDir, 'src', 'layouts'), { recursive: true });
    await mkdir(join(astroDir, 'public'), { recursive: true });

    // Generate Astro config
    const astroConfig = `
import { defineConfig } from 'astro/config';
import tailwind from '@astrojs/tailwind';

export default defineConfig({
  integrations: [tailwind()],
  server: {
    host: 'localhost'
  }
});
`;

    await writeFile(join(astroDir, 'astro.config.mjs'), astroConfig);

    // Generate package.json
    const packageJson = {
      name: `${config.name}-preview`,
      type: 'module',
      scripts: {
        dev: 'astro dev',
        build: 'astro build',
        preview: 'astro preview'
      },
      dependencies: {
        astro: '^4.13.0',
        '@astrojs/tailwind': '^5.1.0',
        tailwindcss: '^3.4.0'
      }
    };

    await writeFile(join(astroDir, 'package.json'), JSON.stringify(packageJson, null, 2));

    // Generate main layout
    const layout = this.generateLayout(config);
    await writeFile(join(astroDir, 'src', 'layouts', 'Layout.astro'), layout);

    // Generate main page
    const indexPage = this.generateIndexPage(config, layoutData);
    await writeFile(join(astroDir, 'src', 'pages', 'index.astro'), indexPage);

    // Generate Tailwind config
    const tailwindConfig = `
module.exports = {
  content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
  theme: {
    extend: {},
  },
  plugins: [],
}
`;

    await writeFile(join(astroDir, 'tailwind.config.cjs'), tailwindConfig);

    // Install dependencies
    console.log(chalk.yellow('üì¶ Installing dependencies...'));
    await execa('npm', ['install'], { cwd: astroDir });

    return astroDir;
  }

  generateLayout(config) {
    const theme = config.themeConfig || { colors: ['#333333', '#666666', '#999999'] };
    
    return `---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{title}</title>
  <style>
    :root {
      --primary-color: ${theme.colors[0]};
      --secondary-color: ${theme.colors[1]};
      --accent-color: ${theme.colors[2]};
    }
    
    /* Post Card Fixed Size */
    body {
      width: 800px;
      height: 500px;
      margin: 0 auto;
      overflow: hidden;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      font-family: 'Georgia', serif;
      border: 2px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .postcard {
      width: 800px;
      height: 500px;
      padding: 20px;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      background: white;
      border-radius: 6px;
      margin: 10px;
      box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
    }
    
    @media (max-width: 820px) {
      body {
        width: 400px;
        height: 250px;
      }
      .postcard {
        width: 400px;
        height: 250px;
        padding: 10px;
        margin: 5px;
      }
    }
  </style>
</head>
<body>
  <div class="postcard">
    <slot />
  </div>
</body>
</html>
`;
  }

  generateIndexPage(config, layoutData = null) {
    const files = config.files || [];
    
    // Use layout data if available
    const layout = layoutData?.layout;
    const isResponsiveLayout = layout && layout.columns && layout.items;
    
    return `---
import Layout from '../layouts/Layout.astro';
---

<Layout title="${config.metadata?.title || config.name}">
  <div style="height: 100%; display: flex; flex-direction: column;">
    <header style="text-align: center; margin-bottom: 16px; flex-shrink: 0;">
      <h1 style="font-size: 24px; font-weight: bold; color: #1f2937; margin: 0 0 8px 0;">
        ${config.metadata?.title || config.name}
      </h1>
      <p style="font-size: 14px; color: #6b7280; margin: 0 0 8px 0;">
        ${config.metadata?.description || 'Created with submitit'}
      </p>
      <div style="font-size: 12px; color: #9ca3af;">
        ${config.theme} ‚Ä¢ ${files.length} files
        ${isResponsiveLayout ? ` ‚Ä¢ ${layout.columns}x${layout.rows} grid` : ''}
      </div>
      ${isResponsiveLayout ? `
        <div style="font-size: 10px; color: #3b82f6; margin-top: 4px;">
          üßò Yoga optimized
        </div>
      ` : ''}
    </header>

    <div style="flex: 1; overflow: auto;">
      ${isResponsiveLayout ? this.generatePostcardLayout(layout) : this.generateCompactLayout(files)}
    </div>

    <footer style="text-align: center; font-size: 10px; color: #9ca3af; margin-top: 8px; flex-shrink: 0;">
      <p>Generated with ‚ú® submitit</p>
    </footer>
  </div>
</Layout>
`;
  }

  generateResponsiveLayout(layout) {
    const { columns, items } = layout;
    const gridCols = columns === 1 ? 'grid-cols-1' : columns === 2 ? 'grid-cols-2' : 'grid-cols-3';
    
    return `
    <div class="grid ${gridCols} gap-6">
      ${items.map(item => `
        <div class="bg-white rounded-lg shadow-md p-6" 
             style="grid-column: ${item.gridPosition?.column + 1 || 'auto'}; 
                    grid-row: ${item.gridPosition?.row + 1 || 'auto'};">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-xl font-semibold text-gray-900">${item.name}</h2>
            <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
              ${item.type}
            </span>
          </div>
          <div class="text-gray-600">
            <p>Role: ${item.role}</p>
            <p>Size: ${item.size}</p>
            ${item.dimensions ? `<p>Dimensions: ${item.dimensions.width}x${item.dimensions.height}</p>` : ''}
            ${item.hierarchyLevel ? `<p>Priority: ${Math.round(item.hierarchyLevel * 100)}%</p>` : ''}
          </div>
          ${item.visualWeight ? `
            <div class="mt-4">
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-blue-600 h-2 rounded-full" style="width: ${item.visualWeight * 100}%"></div>
              </div>
              <p class="text-xs text-gray-500 mt-1">Visual weight: ${Math.round(item.visualWeight * 100)}%</p>
            </div>
          ` : ''}
        </div>
      `).join('')}
    </div>
    `;
  }

  generatePostcardLayout(layout) {
    const { columns, items } = layout;
    const gridCols = columns === 1 ? '1fr' : columns === 2 ? '1fr 1fr' : '1fr 1fr 1fr';
    
    return `
    <div style="display: grid; grid-template-columns: ${gridCols}; gap: 8px; height: 100%;">
      ${items.map(item => `
        <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 4px; padding: 8px; 
                    font-size: 11px; overflow: hidden;
                    grid-column: ${item.gridPosition?.column + 1 || 'auto'}; 
                    grid-row: ${item.gridPosition?.row + 1 || 'auto'};">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 4px;">
            <div style="font-weight: bold; color: #1f2937; font-size: 12px; overflow: hidden; text-overflow: ellipsis;">
              ${item.name}
            </div>
            <span style="background: #dbeafe; color: #1e40af; padding: 2px 6px; border-radius: 8px; font-size: 9px;">
              ${item.type}
            </span>
          </div>
          <div style="color: #6b7280; font-size: 10px; line-height: 1.3;">
            <div>${item.role} ‚Ä¢ ${item.size}</div>
            ${item.dimensions ? `<div>${item.dimensions.width}√ó${item.dimensions.height}</div>` : ''}
          </div>
          ${item.visualWeight ? `
            <div style="margin-top: 4px;">
              <div style="width: 100%; height: 3px; background: #e5e7eb; border-radius: 2px; overflow: hidden;">
                <div style="height: 100%; background: #3b82f6; width: ${item.visualWeight * 100}%; border-radius: 2px;"></div>
              </div>
            </div>
          ` : ''}
        </div>
      `).join('')}
    </div>
    `;
  }

  generateCompactLayout(files) {
    return `
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; height: 100%;">
      ${files.map(file => `
        <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 4px; padding: 8px; 
                    font-size: 11px; overflow: hidden;">
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 4px;">
            <div style="font-weight: bold; color: #1f2937; font-size: 12px; overflow: hidden; text-overflow: ellipsis;">
              ${file.name}
            </div>
            <span style="background: #dbeafe; color: #1e40af; padding: 2px 6px; border-radius: 8px; font-size: 9px;">
              ${file.type}
            </span>
          </div>
          <div style="color: #6b7280; font-size: 10px;">
            <div>${file.role} ‚Ä¢ ${file.size}</div>
          </div>
        </div>
      `).join('')}
    </div>
    `;
  }

  async showInTerminal(url) {
    try {
      console.log(chalk.yellow('üì¨ Displaying post card in terminal...'));
      
      // Wait a moment for server to be fully ready
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Launch browsh to show the post card in terminal
      await execa('browsh', [url, '--startup-url', url], {
        stdio: 'inherit'
      });
      
    } catch (error) {
      console.log(chalk.yellow('üí° Browsh not available, opening in browser instead...'));
      console.log(chalk.yellow(`üí° Install browsh: https://www.brow.sh/downloads/`));
      await this.openBrowser(url);
    }
  }

  async openBrowser(url) {
    try {
      const platform = process.platform;
      
      if (platform === 'darwin') {
        await execa('open', [url]);
      } else if (platform === 'win32') {
        await execa('start', [url]);
      } else {
        await execa('xdg-open', [url]);
      }
    } catch (error) {
      console.log(chalk.yellow(`üí° Open your browser to: ${url}`));
    }
  }

  async stopAllServers() {
    for (const [name, server] of this.activeServers) {
      try {
        server.process.kill();
        console.log(chalk.green(`üõë Stopped server for ${name}`));
      } catch (error) {
        console.error(chalk.red(`‚ùå Error stopping server for ${name}:`, error.message));
      }
    }
    this.activeServers.clear();
  }
}